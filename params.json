{"name":"cloud-config","tagline":"configure once – use everywhere","body":"## cloud-config简介\r\ncloud-config是一个基于Zookeeper的集中式应用配置中心，并与Spring框架紧密集。cloud-config解决了分布式应用或者集群环境中，以硬编码、配置文件、环境变量管理应用配置所造成的应用开发、系统运维工作的繁琐，支持`配置一次，处处使用`。     \r\ncloud-confg在开发过程中受到 [Centralized Application Configuration with Spring and Apache ZooKeeper](http://www.infoq.com/presentations/spring-apache-zookeeper) 的启发。\r\n\r\n## cloud-config-client主要功能示例  \r\n* [系统属性配置](#系统属性配置)\r\n* [数据库资源配置](#数据库资源配置)\r\n\t* [单一数据源配置] (#单一数据源配置)\r\n\t* [多租户数据源配置] (#多租户数据源配置)\r\n* [数据库路由器配置] (#数据库路由器配置)\r\n\t* [读写分离数据库路由配置] (#读写分离数据库路由配置)\r\n\t* [水平分库路由配置] (#水平分库路由配置)\r\n* [加解密资源配置] (#加解密资源配置)\r\n* [自定义资源配置] (#自定义资源配置)\r\n\r\n## cloud-config-server主要功能介绍\r\n\r\n### 系统属性配置\r\ncloud-config扩展了Spring的*PropertySourcesPlaceholderConfigurer*, 用户在开发过程中可以很方便的引用Zookeeper中配置的键值。具体在使用时，cloud-config要求用户将所有全局系统属性置于Zookeeper的/{namespace}/properties节点下。例如，在Zookeeper中节点配置如下：  \r\nroot  \r\n|---/properties    \r\n|---|--/query  \r\n|---|--|--/dev  \r\n|---|--|--/prod    \r\n|---|--/mail  \r\n|------|--/dev  \r\n|------|--/prod  \r\n\r\n`/root`：namespace节点，在系统启动时通过-Dnamesapce=root指定  \r\n`/root/properties`: 系统属性配置根节点，所有系统属性相关配置都定义在这个节点下  \r\n`/root/properties/query`: query模块属性配置节点，与query模块相关的属性定义以json格式在这个节点中  \r\n`/root/properties/query/dev`: profile节点，在系统启动时通过-Dconfig.profile=dev指定。当系统的config profile是dev时，dev节点中定义的属性会与父节点属性**打平**合并，并且覆盖掉与父节点属性键相同的配置值。\r\n\r\n`/root/property/mail`中配置内容如下：\r\n```json\r\n\"mail\": {\r\n    \"host\": \"smtp.sina.com\",\r\n    \"port\": \"25\"\r\n}\r\n```\r\n`/root/property/mail/dev`中配置内容如下：\r\n```json\r\n\"mail\": {\r\n    \"username\": \"dev_mail\",\r\n    \"password\": \"dev1234\"\r\n}\r\n```\r\n合并后得到的属性键值为：\r\n```\r\nmail.host=smtp.sina.com\r\nmail.port=25\r\nmail.username=dev_mail@sina.cn\r\nmail.password=dev1234\r\n```\r\n效果等同于将以上内容定义在mail-config.properties中。\r\n\r\n在Spring中使用时需配置如下：\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!--指定cloud-config namesapce和schema-->\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <!--配置用于读取配置信息的zookeeper client，connection string在系统启动时，可通过指定-Dconfig.center.url覆盖-->    \r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n\r\n    <!--zk-property-placeholder中可以在path属性上同时指定多个配置路径（相对于{namesapce}/properties)，路径在前者优先-->\r\n    <!--zk-property-placeholder中可以在location中引入本地配置文件，local-override为true时本地配置将覆盖zk中的配置-->    \r\n    <cc:zk-property-placeholder path=\"/mail, /query\" location=\"classpath:query-server.properties\" local-override=\"true\"/>\r\n    \r\n    <!--使用时与Spring原生property相同-->\r\n    <bean id=\"mailBean\" class=\"org.squirrelframework.cloud.spring.ZkPropertyPlaceholderConfigurerTest$SampleBean\">\r\n        <property name=\"host\" value=\"${mail.host}\"/>\r\n        <property name=\"port\" value=\"${mail.port}\"/>\r\n    </bean>\r\n```\r\n\r\n### 数据库资源配置\r\n不同于属性配置，系统资源配置均定义在/{namespace}/config节点下。目前对于数据库资源抽象仅支持JDBC数据源。\r\n\r\n#### 单一数据源配置  \r\n对于单一数据源配置，Zookeeper中节点配置如下：  \r\nroot  \r\n|---/config    \r\n|---|--/database  \r\n|------|--/mail  \r\n|---------|--/dev  \r\n|---------|--/prod\r\n\r\n`/root/config`: 系统资源配置根节点，所有系统资源相关配置都定义在这个节点下  \r\n`/root/config/database`：数据库资源配置节点  \r\n`/root/config/database/mail`: mail模块数据库资源配置节点，资源定义以json格式在这个节点中  \r\n`/root/config/database/mail/dev`: mail模块数据库资源dev profile配置节点  \r\n\r\n`/root/config/database`中配置内容如下：  \r\n```json\r\n{\r\n    \"driverClassName\" : \"com.mysql.jdbc.Driver\",\r\n    \r\n    \"idleMaxAgeInMinutes\" : 240,\r\n    \"idleConnectionTestPeriodInMinutes\" : 60,\r\n    \"maxConnectionsPerPartition\" : 10,\r\n    \"minConnectionsPerPartition\" : 1,\r\n    \"partitionCount\" : 2,\r\n    \"acquireIncrement\" : 5,\r\n    \"statementsCacheSize\" : 100\r\n}\r\n```\r\n\r\n`/root/config/database/mail`中配置内容如下：  \r\n```json\r\n{\r\n    \"userName\" : \"root\",\r\n    \"password\" : \"root\"\r\n}\r\n```\r\n\r\n`/root/config/database/mail/dev`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/mail-dev?useUnicode=true\"\r\n}\r\n```\r\n\r\n`/root/config/database/mail/prod`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/mail-prod?useUnicode=true\"\r\n}\r\n```\r\n以上配置内容基于BoneCP Datasource配置（参见org.squirrelframework.cloud.resource.database.BoneCPDataSourceConfig)\r\n\r\n在Spring中使用时需配置如下：\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n    <!-- path指定相对于/{namespace}/config的数据源配置路径 -->\r\n    <!-- resource-type指定Pool DataSource类型（BoneCP，C3P0，Druid）-->\r\n    <!-- auto-reload指定当当前profile中配置内容发生变化时，是否重新创建数据源 -->\r\n    <cc:zk-jdbc-datasource id=\"dataSource\" path=\"/database/mail\" resource-type=\"BoneCP\" auto-reload=\"true\"/>\r\n</beans>\r\n```\r\n**注意：**   \r\n1. Cloud-Config创建数据源时会合并当前路径(/database/mail)与其父节点(/database)及其profile子节点(/database/mail/dev)的内容，合并优先级dev>mail>database。  \r\n2. 当auto-reload为true，并且dev节点中配置内容发生变化时，对应数据源将自动重新创建。\r\n\r\n#### 多租户数据源配置  \r\n支持多租户数据源需要使用到org.squirrelframework.cloud.resource.database.RoutingDataSourceFactoryBean来创建对应数据源。这里需要用户指定RoutingKeyResolver，需要配置与RoutingKey对应的目录结构。\r\n\r\n对于多租户数据源配置，Zookeeper中节点配置如下：  \r\nroot  \r\n|---/config    \r\n|------/database  \r\n|------|--/mail  \r\n|---------|--/tenant1  \r\n|---------|--|--/dev  \r\n|---------|--|--/&172.31.201.0-99@dev  \r\n|---------|--|--/prod  \r\n|---------|--/tenant2  \r\n|---------|--|--/dev  \r\n|---------|--|--/prod  \r\n|---------|--/unknown  \r\n\r\n`/root/database/mail`: mail模块数据库资源配置节点  \r\n`/root/database/mail/tenant1`: 租户ID为tenant1的mail模块数据库资源配置节点  \r\n`/root/database/mail/tenant1/dev`: dev profile配置节点  \r\n`/root/database/mail/tenant1/dev/&172.31.201.0-99@dev`:  条件节点，当本机IP地址在172.31.201.0-99之间，并且系统运行在dev profile上时生效，条件节点的配置会覆盖dev节点的配置。条件节点可以应用于针对某几台server启用某些配置项。条件节点必须同时指明IP地址范围(&)和生效Profile名称(@)。   \r\n\r\n`/root/config/database/mail`中配置内容如下：  \r\n```json\r\n{\r\n    \"driverClassName\" : \"${mysql.driver.name}\",\r\n    \r\n    \"idleMaxAgeInMinutes\" : 240,\r\n    \"idleConnectionTestPeriodInMinutes\" : 60,\r\n    \"maxConnectionsPerPartition\" : 10,\r\n    \"minConnectionsPerPartition\" : 1,\r\n    \"partitionCount\" : 2,\r\n    \"acquireIncrement\" : 5,\r\n    \"statementsCacheSize\" : 100\r\n}\r\n```\r\n注：系统属性可以在资源配置中引用，例如在/{namespace}/properties/variables中定义了\"{\"mysql.driver.name\":\"com.mysql.jdbc.Driver\"}\"\r\n\r\n`/root/config/database/mail/tenant1`中配置内容如下：  \r\n```json\r\n{\r\n    \"userName\" : \"root\",\r\n    \"password\" : \"root\"\r\n}\r\n```\r\n\r\n`/root/config/database/mail/tenant1/dev`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/mail-t1-dev?useUnicode=true\"\r\n}\r\n```\r\n\r\n`/root/config/database/mail/tenant1/prod`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/mail-t1-prod?useUnicode=true\"\r\n}\r\n```\r\n\r\n在Spring中使用时需配置如下：\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n    <!-- 配置默认数据库路由键值解析器 -->\r\n\t<bean id=\"zk-default-resolver\" class=\"org.squirrelframework.cloud.TestRoutingKeyResolver\"/>\r\n    <!-- path指定相对于/{namespace}/config的数据源配置路径 -->\r\n    <!-- resource-type指定Pool DataSource类型（BoneCP，C3P0，Druid）-->\r\n    <!-- auto-reload指定当当前profile中配置内容发生变化时，是否重新创建数据源 -->\r\n    <!-- routing-support指定该路径下的数据库资源是支持路由的 -->\r\n    <!-- fallback指定当解析出来的数据库路由键值无法匹配租户ID时，回退数据源的配置路径 -->\r\n    <cc:zk-jdbc-datasource id=\"dataSource\"\r\n                           path=\"/database/mail\"\r\n                           routing-support=\"true\"\r\n                           fallback=\"/database/mail/unknown\"\r\n                           auto-reload=\"true\"\r\n    />\r\n</beans>\r\n```\r\n**注意：**   \r\n1. 默认数据库路由键值解析器的id必须是zk-default-resolver，否则就需要在zk-jdbc-datasource中通过resolver-ref指定对应的resolver。RoutingKeyResolver用于获取当前的数据库路由键值，用户需要实现对应的routing key resolver（e.g. TenantIdThreadLocalResolver）返回对应租户ID，且模块路径下的配置节点名为对应租户ID，才能保证数据源的正确路由。   \r\n2. Cloud-Config创建数据源时会合并当前租户路径（/database/mail/tenant1）与父节点(/database/mail/)及其profile子节点(/database/mail/tenant1/dev)的内容，合并优先级dev>mail>tenant1。  \r\n2. 当auto-reload为true，并且dev节点及其兄弟节点中配置内容发生变化，增加或删除profile节点，对应数据源将自动重新创建。\r\n\r\n### 数据库路由器配置\r\n\r\n#### 读写分离数据库路由配置\r\ncloud-config通过在应用层做多数据源路由（嵌套路由）来支持读写分离，一写多读等应用场景。\r\n\r\n对于读写分离数据源配置，Zookeeper中节点配置如下：  \r\nroot  \r\n|---/config    \r\n|------/database  \r\n|------|--/user.................................. _TenantIdThreadLocalResolver    (tenant1/tenant2)_    \r\n|------------/tenant1............................ _MajorProfileRoutingKeyResolver (dev/prod)_   \r\n|------------|--/dev  \r\n|------------|--/prod............................ _DeclarativeRoutingKeyResolver  (write/read)_  \r\n|------------|--|--/write  \r\n|------------|--|--/read......................... _DispatchableRoutingKeyResolver (01/02/03)_       \r\n|------------|--|--|--/01  \r\n|------------|--|--|--/02    \r\n|------------|--|--|--/03      \r\n|------------/tenant2  \r\n|------------|--/dev  \r\n|------------|--/prod  \r\n注：user模块目录结构展现了四层数据源嵌套路由。  \r\n* 第一层是在模块节点(/database/user)上通过TenantIdThreadLocalResolver定位到指定的租户配置节点上。   \r\n* 第二层是在租户节点(/database/user/tenant1)上通过MajorProfileRoutingKeyResolver对应的profile节点上。  \r\n* 第三层是在profile节点(/database/user/tenant1/prod)上通过DeclarativeRoutingKeyResolver对应的读或写节点上。  \r\n* 第四层是在读节点(/database/user/tenant1/prod/write)上通过DispatchableRoutingKeyResolver读节点下的子节点(01, 02, 03)进行Round-Robin选择。   \r\n* 如果对应节点无子节点，则路由到该节点结束。例如，在/database/user/tenant1/dev下无读写节点，则所有的读写请求都路由到dev节点所对应的同一数据源。 \r\n* 当路由到对应叶子节点时，例如/database/user/tenant1/prod/write，cloud-config仅合并该节点与其父节点(/database/user/tenant1/prod)上的配置信息创建数据源。  \r\n\r\n在Spring中使用时需配置如下： \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.springframework.org/schema/tx\r\n            http://www.springframework.org/schema/tx/spring-tx.xsd\r\n            http://www.springframework.org/schema/context\r\n            http://www.springframework.org/schema/context/spring-context.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <!-- 支持声明式路由 -->\r\n    <cc:zk-declarative-routing/>\r\n\r\n    <!--  创建租户ID路由器 -->\r\n    <bean id=\"tenantResolver\" class=\"org.squirrelframework.cloud.routing.TenantIdThreadLocalResolver\"/>\r\n    <!-- 创建主Profile路由器 -->\r\n    <bean id=\"profileResolver\"  class=\"org.squirrelframework.cloud.routing.MajorProfileRoutingKeyResolver\"/>\r\n    <!-- 创建声明式路由器 -->\r\n    <bean id=\"rwSplitResolver\" class=\"org.squirrelframework.cloud.routing.DeclarativeRoutingKeyResolver\"/>\r\n    <!-- 创建循环派发路由器 -->\r\n    <bean id=\"dispatchResolver\" class=\"org.squirrelframework.cloud.routing.DispatchableRoutingKeyResolver\">\r\n        <property name=\"path\" value=\"/database/user\"/>\r\n        <!-- 启用自动刷新功能 -->\r\n        <property name=\"autoRefresh\" value=\"true\"/>\r\n        <!-- 每隔5分钟自动刷新可路由列表 (read节点下的01，02，03节点) -->\r\n        <property name=\"refreshInterval\" value=\"5\"/>\r\n    </bean>\r\n\r\n    <!-- 创建user模块数据源路由器，id指定为my-default-resolver，通过NestedRoutingKeyResolver组装之前创建的路由器 -->\r\n    <bean id=\"my-default-resolver\" class=\"org.squirrelframework.cloud.routing.NestedRoutingKeyResolver\">\r\n        <property name=\"resolvers\">\r\n            <list>\r\n                <!-- 路由器引用顺序与user模块目录结构对应 -->\r\n                <ref bean=\"tenantResolver\"/>\r\n                <ref bean=\"profileResolver\"/>\r\n                <ref bean=\"rwSplitResolver\"/>\r\n                <ref bean=\"dispatchResolver\"/>\r\n            </list>\r\n        </property>\r\n    </bean>\r\n\r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n    <!-- routing-support设为true启用数据库路由，并将routing resolver指定为my-default-resolver -->\r\n    <cc:zk-jdbc-datasource id=\"dataSource\" path=\"/database/user\" routing-support=\"true\" resolver-ref=\"my-default-resolver\"/>\r\n\r\n    <context:component-scan base-package=\"org.squirrelframework.cloud.sample\" />\r\n    <tx:annotation-driven transaction-manager=\"transactionManager\" />\r\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\r\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" />\r\n    </bean>\r\n\r\n    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\r\n        <property name=\"dataSource\" ref=\"dataSource\" />\r\n        <property name=\"packagesToScan\" value=\"org.squirrelframework.cloud.sample\"/>\r\n        <property name=\"jpaVendorAdapter\">\r\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\" />\r\n        </property>\r\n        <property name=\"jpaPropertyMap\">\r\n            <props>\r\n                <prop key=\"hibernate.show_sql\">false</prop>\r\n                <prop key=\"hibernate.archive.autodetection\" />\r\n                <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\r\n                <prop key=\"hibernate.format_sql\">true</prop>\r\n                <!-- 在数据源启用routing-support后，自动创建、更新表功能必须屏蔽 -->\r\n                <!--<prop key=\"hibernate.hbm2ddl.auto\">create</prop>-->\r\n                <!-- 在数据源启用routing-support后，该属性必须设为false -->\r\n                <prop key=\"hibernate.temp.use_jdbc_metadata_defaults\">false</prop>\r\n            </props>\r\n        </property>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n**注**：在启用数据源路由功能后，所有在应用启动时访问数据源动作都必须屏蔽掉，例如hibernate.hbm2ddl.auto，hibernate.temp.use\\_jdbc\\_metadata\\_defaults。因为在系统启动时，无法获取任何数据源路由信息，无法确定该如何路由。\r\n\r\n\r\njava代码中通过@RoutingKey进行声明式路由：\r\n```java\r\n@Service\r\npublic class UserService {\r\n    @Autowired\r\n    private UserDAO userDAO;\r\n\r\n    @Transactional\r\n    @RoutingKey(\"write\")\r\n    public void insertUser(User user) {\r\n        userDAO.insertUser(user);\r\n    }\r\n    \r\n    // 如果使用了DispatchableRoutingKeyResolver，则recordRoutingKeys需设置为true\r\n    @RoutingKey(value = \"read\", recordRoutingKeys = true)\r\n    public List<User> findAllUsers() {\r\n        return userDAO.findAllUsers();\r\n    }\r\n}\r\n```\r\n\r\n#### 水平分库路由配置\r\ncloud-config通过支持复杂路由规则设置与可路由的数据库sequence生成器，来支持数据库水平拆分。本例将演示通过用户ID将产品数据均匀分布到01-04数据库中。  \r\n\r\n对于水平分库数据源配置，Zookeeper中节点配置如下：   \r\nroot  \r\n|---/config    \r\n|------/database  \r\n|------|--/product............................... _TenantIdThreadLocalResolver    (tenant1/tenant2)_    \r\n|------------/tenant1............................ _MajorProfileRoutingKeyResolver (dev/prod)_   \r\n|------------|--/dev............................. _DeclarativeRoutingKeyResolver  (01/02/03/04)_   \r\n|------------|--|--/01  \r\n|------------|--|--/02  \r\n|------------|--|--/03    \r\n|------------|--|--/04  \r\n|------------|--/prod............................ _DeclarativeRoutingKeyResolver  (01/02/03/04)_  \r\n|------------|--|--/01  \r\n|------------|--|--/02  \r\n|------------|--|--/03    \r\n|------------|--|--/04         \r\n|------------/tenant2  \r\n|------------|--/dev  \r\n|------------|--/prod  \r\n|---/properties    \r\n|---|--/sequence  \r\n\r\n`/root/config/database/product/tenant1/dev`中配置内容如下：  \r\n```json\r\n{\r\n    \"driverClassName\" : \"com.mysql.jdbc.Driver\",\r\n    \r\n    \"idleMaxAgeInMinutes\" : 240,\r\n    \"idleConnectionTestPeriodInMinutes\" : 60,\r\n    \"maxConnectionsPerPartition\" : 10,\r\n    \"minConnectionsPerPartition\" : 1,\r\n    \"partitionCount\" : 2,\r\n    \"acquireIncrement\" : 5,\r\n    \"statementsCacheSize\" : 100,\r\n    \"userName\" : \"root\",\r\n    \"password\" : \"root\"\r\n}\r\n```\r\n\r\n`/root/config/database/product/tenant1/dev/01`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/product-t1-dev-01?useUnicode=true\"\r\n}\r\n```\r\n...  \r\n`/root/config/database/product/tenant1/dev/04`中配置内容如下：  \r\n```json\r\n{\r\n  \"jdbcUrl\" : \"jdbc:mysql://127.0.0.1:3306/product-t1-dev-04?useUnicode=true\"\r\n}\r\n```\r\n在开发环境上， 我们将01-04产品库对应到同一台数据库服务器。在生产环境中可以对应到单独的数据库服务器。  \r\n\r\n`/properties/sequence`中配置如下：\r\n```json\r\n{\r\n    \"sequence\" : {\r\n        \"format.expression\" : \"T(java.lang.String).format('%s%s%06d', #dbDateStr, #dbName.substring(15), #sequenceValue)\",\r\n        \"product.id.sharding.rule\" : \"#id.substring(8, 10)\",\r\n        \"product.sharding.rule\" : \"#product?.id?.substring(8, 10) ?: T(java.lang.String).format('%02d', #product.customerId%4+1)\"\r\n    }\r\n}\r\n```  \r\n**注**：`/sequence`属性配置定义了sequence生成规则配置与数据库水平分片规则，规则通过Spring EL表达式描述。为了避免在代码中硬编码这些规则，我们将其定义在系统属性中，方便日后管理。  \r\n* format.sequence：生成由16位数字组成的sequence组装规则，其中前8位由sequence生成时的日期组成（如20151217），9-10位由数据库的index组成（如01），后六位由一个当前库当前sequence下自增长的整数组成（如000001），组装出来的sequence就是2015121701000001.\r\n*  product.id.sharding.rule：基于产品ID的数据源路由规则，取产品ID的9-10位作为当前路由键值（对应在format sequence的时候将数据库index放置在9-10位）\r\n* product.sharding.rule：基于产品对象的数据库路由规则。当产品ID不为空时，按产品ID的9-10位键值路由，当产品ID为空时，按产品对应的客户ID与4的模值加1作为路由键值。这条规则可以同时满足创建新产品和保存已有产品时对于数据源路由的需求。\r\n\r\n为了使用sequence功能，需在各个数据库中创建对应的sequence表。\r\n```sql\r\nCREATE TABLE IF NOT EXISTS __sequence_table__ (\r\n     name varchar(64) NOT NULL,\r\n     value varchar(20) NOT NULL,\r\n     min_limit varchar(20) NOT NULL\r\n     max_limit varchar(20) NOT NULL\r\n     step varchar(20) NOT NULL\r\n     create_time datetime NOT NULL\r\n     modified_time datetime NOT NULL\r\n     PRIMARY KEY (name)\r\n)；\r\n```\r\n其中，```name```是sequence的名称，```value```是当前sequence的值，```min_limit```是sequence起始值，```max_limit```是sequence最大值（超过最大值后回到min_limit），```step```是每次取sequence的步长。\r\n\r\n在Spring中使用时需配置如下： \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.springframework.org/schema/context\r\n            http://www.springframework.org/schema/context/spring-context.xsd\r\n            http://www.springframework.org/schema/tx\r\n            http://www.springframework.org/schema/tx/spring-tx.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <context:annotation-config/>\r\n\r\n\t<!--  创建租户ID路由器 -->\r\n    <bean id=\"tenantResolver\" class=\"org.squirrelframework.cloud.routing.TenantIdThreadLocalResolver\"/>\r\n    <!-- 创建主Profile路由器 -->\r\n    <bean id=\"profileResolver\"  class=\"org.squirrelframework.cloud.routing.MajorProfileRoutingKeyResolver\"/>\r\n    <!-- 创建声明式路由器 -->\r\n    <bean id=\"routingKeyResolver\" class=\"org.squirrelframework.cloud.routing.DeclarativeRoutingKeyResolver\">\r\n    \t<!-- 启用循环取routing key -->\r\n        <property name=\"selectRoutingKeyMethod\" value=\"ROLLING_POLL\"/>\r\n    </bean>\r\n\r\n\t<!-- 组装sequence和routing datasource使用的路由器 -->\r\n    <bean id=\"my-resolver\" class=\"org.squirrelframework.cloud.routing.NestedRoutingKeyResolver\">\r\n        <property name=\"resolvers\">\r\n            <list>\r\n                <ref bean=\"tenantResolver\"/>\r\n                <ref bean=\"profileResolver\"/>\r\n                <ref bean=\"routingKeyResolver\"/>\r\n            </list>\r\n        </property>\r\n    </bean>\r\n\r\n\t<!-- 启用声明式路由 -->\r\n    <cc:zk-declarative-routing/>\r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n    <!-- 配置系统属性路径 -->\r\n    <cc:zk-property-placeholder path=\"/sequence\"/>\r\n    <!-- 配置routing datasource -->\r\n    <cc:zk-jdbc-datasource id=\"dataSource\" path=\"/database/mydb\" routing-support=\"true\" resolver-ref=\"my-resolver\"/>\r\n    <!-- 配置routing sequence，并设置sequence格式化表达式的属性键 -->\r\n    <cc:zk-sequence-generator id=\"sequence\" path=\"/database/mydb\" resolver-ref=\"my-resolver\" format-expression=\"${sequence.format.expression}\"/>\r\n\r\n    <context:component-scan base-package=\"org.squirrelframework.cloud.resource.sequence\" />\r\n    <tx:annotation-driven transaction-manager=\"transactionManager\" />\r\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\r\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" />\r\n    </bean>\r\n\r\n    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\r\n        <property name=\"dataSource\" ref=\"dataSource\" />\r\n        <property name=\"packagesToScan\" value=\"org.squirrelframework.cloud.resource.sequence\"/>\r\n        <property name=\"jpaVendorAdapter\">\r\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\" />\r\n        </property>\r\n        <property name=\"jpaPropertyMap\">\r\n            <props>\r\n                <prop key=\"hibernate.show_sql\">false</prop>\r\n                <prop key=\"hibernate.archive.autodetection\" />\r\n                <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\r\n                <prop key=\"hibernate.format_sql\">true</prop>\r\n                <prop key=\"hibernate.temp.use_jdbc_metadata_defaults\">false</prop>\r\n            </props>\r\n        </property>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n在应用代码中使用这些配置内容：\r\n```java\r\n@Service\r\npublic class ProductService {\r\n\r\n    @Autowired\r\n    @Qualifier(\"sequence\")\r\n    private SequenceGenerator sequenceGenerator;\r\n\r\n    @Autowired\r\n    private ProductDao productDao;\r\n\r\n    @Transactional\r\n    @RoutingKey(\"#{ ${sequence.product.sharding.rule} }\")\r\n    public String saveProduct(@RoutingVariable(\"product\") Product product) throws Exception {\r\n        if(product.getId() == null) {\r\n        \t// 创建新产品\r\n            String productId = sequenceGenerator.next(\"product\");\r\n            product.setId(productId);\r\n            productDao.save(product);\r\n        } else {\r\n        \t// 更新已有产品\r\n            productDao.update(product);\r\n        }\r\n        return product.getId();\r\n    }\r\n\r\n    @RoutingKey(\"#{ ${sequence.product.id.sharding.rule} }\")\r\n    public Product findProductById(@RoutingVariable(\"id\") String id) {\r\n        return productDao.findProductById(id);\r\n    }\r\n\r\n}\r\n```\r\n**注意**：如果使用了多层RoutingKey声明，@Transactional必须声明在最内层RoutingKey上。因为在创建Transaction时需要关联数据源，如果不在最内层@RoutingKey上，将会因为缺少routing key信息导致无法指定数据源。  \r\n\r\n### 加解密资源配置  \r\n通过cloud-config，用户可以管理Java KeyStore(JKS)相关的加解密配置信息，并且支持不同租户下的加解密器的路由。\r\n\r\nZookeeper配置入下：  \r\nroot  \r\n|---/config    \r\n|------/codec  \r\n|------|--/keystore  \r\n|---------|--/tenant1  \r\n|---------|--/tenant2    \r\n|---------|--/unknown    \r\n\r\n```root/config/codec/keystore/tenant1```中配置如下：\r\n```json\r\n{\r\n    \"keyStoreLocation\" : \"/usr/local/etc/keystore/t1.keystore\",\r\n    \"keyStorePassword\" : \"myStorePassword\",\r\n    \"keyAlias\" : \"t1\",\r\n    \"keyPassword\" : \"myKeyPassword\"\r\n}\r\n```\r\n\r\nSpring配置如下：\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:cc=\"http://www.squirrelframework.org/schema/config\"\r\n       xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans\r\n            http://www.springframework.org/schema/beans/spring-beans.xsd\r\n            http://www.squirrelframework.org/schema/config\r\n            http://www.squirrelframework.org/schema/config/cloud-config.xsd\">\r\n\r\n    <cc:zk-client connection-string=\"127.0.0.1:1234\"/>\r\n    <bean id=\"tenantResolver\" class=\"org.squirrelframework.cloud.routing.TenantIdThreadLocalResolver\"/>\r\n\r\n    <!-- 创建类型为Codec加解密器-->\r\n    <cc:zk-resource id=\"zk-default-cipher-codec\" path=\"/codec/keystore\"\r\n                    resource-type=\"Cipher\" routing-support=\"true\" resolver-ref=\"tenantResolver\"/>\r\n\r\n</beans>\r\n```\r\n\r\n在Java代码中使用：\r\n```java\r\n@Component\r\npublic class SecurityUtil {\r\n   @Autowired\r\n   @Qualifier(\"zk-default-cipher-codec\")\r\n   private Codec cipherCodec;\r\n   \r\n   public void doEncryption(String sensitiveData) {\r\n       String encryptedData = cipherCodec.encode(sensitiveData);\r\n       ...\r\n   }\r\n}\r\n```\r\n\r\n在Json序列化与反序列化时使用：\r\n```java\r\npublic class JdbcDataSourceConfig extends CloudResourceConfig {\r\n    ...\r\n    @Secret\r\n    @JsonSerialize(using = CipherEncodeSerializer.class)\r\n    @JsonDeserialize(using = CipherDecodeDeSerializer.class)\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n}\r\n```  \r\n\r\n\r\n## 开发计划\r\n* 生产环境配置的权限控制及监管  \r\n* 敏感数据加密\r\n* 完善cloud-config-server展现  \r\n* ~~支持Routing Sequence~~\r\n* 支持更多的资源配置  \r\n\t* Mongo connection pools\r\n\t* Redis connections\r\n\t* FTP and SFTP connections\r\n\t* RabbitMQ\r\n\t* SOLR\r\n\t* ElasticSearch\r\n\t* Executor services\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}